{"ast":null,"code":"export function split_on_matched_words(text, dict_keys) {\n  console.log(dict_keys.length);\n  const keyWords = dict_keys.join(\"|\");\n  const regex = new RegExp(`[ء-٩]*${keyWords}[ء-٩]*`, \"g\");\n  const matchedWords = text.match(regex);\n  if (!matchedWords) return text;\n  const splitWordsKeys = matchedWords.join(\"|\");\n  const SplitWordsRegex = new RegExp(`(${splitWordsKeys})`, \"g\");\n  const splitWords = text.split(SplitWordsRegex);\n  return splitWords;\n}\nexport function add_definations_for_matched_words(splitWords, dict_keys, dict) {\n  const newText = [];\n\n  for (const sentence of splitWords) {\n    let segment = sentence;\n\n    for (const key of dict_keys) {\n      const regex = new RegExp(`[ء-٩]*${key}[ء-٩]*`, \"g\");\n\n      if (sentence.match(regex, \"g\")) {\n        segment = [sentence, dict[key]];\n      }\n    }\n\n    newText.push(segment);\n  }\n\n  return newText;\n}","map":{"version":3,"names":["split_on_matched_words","text","dict_keys","console","log","length","keyWords","join","regex","RegExp","matchedWords","match","splitWordsKeys","SplitWordsRegex","splitWords","split","add_definations_for_matched_words","dict","newText","sentence","segment","key","push"],"sources":["/app/src/utils/MatchingWords.js"],"sourcesContent":["export function split_on_matched_words(text, dict_keys) {\n  console.log(dict_keys.length);\n  const keyWords = dict_keys.join(\"|\");\n  const regex = new RegExp(`[ء-٩]*${keyWords}[ء-٩]*`, \"g\");\n  const matchedWords = text.match(regex);\n  if (!matchedWords) return text;\n  const splitWordsKeys = matchedWords.join(\"|\");\n  const SplitWordsRegex = new RegExp(`(${splitWordsKeys})`, \"g\");\n  const splitWords = text.split(SplitWordsRegex);\n  return splitWords;\n}\n\nexport function add_definations_for_matched_words(splitWords, dict_keys, dict) {\n  const newText = [];\n  for (const sentence of splitWords) {\n    let segment = sentence;\n    for (const key of dict_keys) {\n      const regex = new RegExp(`[ء-٩]*${key}[ء-٩]*`, \"g\");\n      if (sentence.match(regex, \"g\")) {\n        segment = [sentence, dict[key]];\n      }\n    }\n    newText.push(segment);\n  }\n  return newText;\n}\n"],"mappings":"AAAA,OAAO,SAASA,sBAAT,CAAgCC,IAAhC,EAAsCC,SAAtC,EAAiD;EACtDC,OAAO,CAACC,GAAR,CAAYF,SAAS,CAACG,MAAtB;EACA,MAAMC,QAAQ,GAAGJ,SAAS,CAACK,IAAV,CAAe,GAAf,CAAjB;EACA,MAAMC,KAAK,GAAG,IAAIC,MAAJ,CAAY,SAAQH,QAAS,QAA7B,EAAsC,GAAtC,CAAd;EACA,MAAMI,YAAY,GAAGT,IAAI,CAACU,KAAL,CAAWH,KAAX,CAArB;EACA,IAAI,CAACE,YAAL,EAAmB,OAAOT,IAAP;EACnB,MAAMW,cAAc,GAAGF,YAAY,CAACH,IAAb,CAAkB,GAAlB,CAAvB;EACA,MAAMM,eAAe,GAAG,IAAIJ,MAAJ,CAAY,IAAGG,cAAe,GAA9B,EAAkC,GAAlC,CAAxB;EACA,MAAME,UAAU,GAAGb,IAAI,CAACc,KAAL,CAAWF,eAAX,CAAnB;EACA,OAAOC,UAAP;AACD;AAED,OAAO,SAASE,iCAAT,CAA2CF,UAA3C,EAAuDZ,SAAvD,EAAkEe,IAAlE,EAAwE;EAC7E,MAAMC,OAAO,GAAG,EAAhB;;EACA,KAAK,MAAMC,QAAX,IAAuBL,UAAvB,EAAmC;IACjC,IAAIM,OAAO,GAAGD,QAAd;;IACA,KAAK,MAAME,GAAX,IAAkBnB,SAAlB,EAA6B;MAC3B,MAAMM,KAAK,GAAG,IAAIC,MAAJ,CAAY,SAAQY,GAAI,QAAxB,EAAiC,GAAjC,CAAd;;MACA,IAAIF,QAAQ,CAACR,KAAT,CAAeH,KAAf,EAAsB,GAAtB,CAAJ,EAAgC;QAC9BY,OAAO,GAAG,CAACD,QAAD,EAAWF,IAAI,CAACI,GAAD,CAAf,CAAV;MACD;IACF;;IACDH,OAAO,CAACI,IAAR,CAAaF,OAAb;EACD;;EACD,OAAOF,OAAP;AACD"},"metadata":{},"sourceType":"module"}