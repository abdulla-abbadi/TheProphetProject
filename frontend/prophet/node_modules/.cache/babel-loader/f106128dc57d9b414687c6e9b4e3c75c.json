{"ast":null,"code":"var _jsxFileName = \"/Users/abbadi/Desktop/personal-projects/prophet-descriptions-app/prophet/src/components/hadith/Text.jsx\",\n    _s = $RefreshSig$();\n\nimport { random } from \"fontawesome\";\nimport React from \"react\";\nimport { useState } from \"react\";\nimport OverlayTrigger from \"react-bootstrap/OverlayTrigger\";\nimport Popover from \"react-bootstrap/Popover\";\nimport dictionary from \"../../sources/dictionary.json\";\nimport dictionary_keys from \"../../sources/dictionary_keys.json\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Text(_ref) {\n  _s();\n\n  let {\n    text\n  } = _ref;\n  const [dict] = useState(JSON.parse(JSON.stringify(dictionary)));\n  const [dict_keys] = useState(JSON.parse(JSON.stringify(dictionary_keys)));\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: console.log(add_definations_for_matched_words(split_on_matched_words(text, dict_keys)))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 12,\n    columnNumber: 5\n  }, this);\n} // function get_all_matched_words(text, dict_keys) {\n//   const words = text.split(\" \");\n//   let matched_words = [];\n//   for (const word of words) {\n//     for (const key of dict_keys) {\n//       const regex = new RegExp(`[ء-٩]*(${key})[ء-٩]*`, \"g\");\n//       if (word.match(regex)) {\n//         matched_words.push([word, key]);\n//       }\n//     }\n//   }\n//   return matched_words;\n// }\n\n_s(Text, \"s4MjzcTSKo/UCZrQ4aKBMwrtl2I=\");\n\n_c = Text;\n\nfunction split_on_matched_words(text, dict_keys) {\n  const keyWords = dict_keys.join(\"|\");\n  const regex = new RegExp(`[ء-٩]*(${keyWords})[ء-٩]*`, \"g\");\n  const matchedWords = text.match(regex);\n  const splitWordsKeys = matchedWords.join(\"|\");\n  const SplitWordsRegex = new RegExp(`(${splitWordsKeys})`, \"g\");\n  const splitWords = text.split(SplitWordsRegex);\n  return splitWords;\n}\n\nfunction add_definations_for_matched_words(splitWords, dict_keys, dict) {\n  const newText = [];\n\n  for (const sentence of splitWords) {\n    for (const key of dict_keys) {\n      const regex = new RegExp(`[ء-٩]*${key}[ء-٩]*`, \"g\");\n\n      if (sentence.match(regex, \"g\")) {\n        newText.push([sentence, dict[key]]);\n      } else {\n        newText.push(sentence);\n      }\n    }\n  }\n\n  return newText;\n}\n\nvar _c;\n\n$RefreshReg$(_c, \"Text\");","map":{"version":3,"names":["random","React","useState","OverlayTrigger","Popover","dictionary","dictionary_keys","Text","text","dict","JSON","parse","stringify","dict_keys","console","log","add_definations_for_matched_words","split_on_matched_words","keyWords","join","regex","RegExp","matchedWords","match","splitWordsKeys","SplitWordsRegex","splitWords","split","newText","sentence","key","push"],"sources":["/Users/abbadi/Desktop/personal-projects/prophet-descriptions-app/prophet/src/components/hadith/Text.jsx"],"sourcesContent":["import { random } from \"fontawesome\";\nimport React from \"react\";\nimport { useState } from \"react\";\nimport OverlayTrigger from \"react-bootstrap/OverlayTrigger\";\nimport Popover from \"react-bootstrap/Popover\";\nimport dictionary from \"../../sources/dictionary.json\";\nimport dictionary_keys from \"../../sources/dictionary_keys.json\";\nexport default function Text({ text }) {\n  const [dict] = useState(JSON.parse(JSON.stringify(dictionary)));\n  const [dict_keys] = useState(JSON.parse(JSON.stringify(dictionary_keys)));\n  return (\n    <div>\n      {console.log(\n        add_definations_for_matched_words(\n          split_on_matched_words(text, dict_keys)\n        )\n      )}\n    </div>\n  );\n}\n\n// function get_all_matched_words(text, dict_keys) {\n//   const words = text.split(\" \");\n//   let matched_words = [];\n//   for (const word of words) {\n//     for (const key of dict_keys) {\n//       const regex = new RegExp(`[ء-٩]*(${key})[ء-٩]*`, \"g\");\n//       if (word.match(regex)) {\n//         matched_words.push([word, key]);\n//       }\n//     }\n//   }\n\n//   return matched_words;\n// }\n\nfunction split_on_matched_words(text, dict_keys) {\n  const keyWords = dict_keys.join(\"|\");\n  const regex = new RegExp(`[ء-٩]*(${keyWords})[ء-٩]*`, \"g\");\n  const matchedWords = text.match(regex);\n  const splitWordsKeys = matchedWords.join(\"|\");\n  const SplitWordsRegex = new RegExp(`(${splitWordsKeys})`, \"g\");\n  const splitWords = text.split(SplitWordsRegex);\n  return splitWords;\n}\n\nfunction add_definations_for_matched_words(splitWords, dict_keys, dict) {\n  const newText = [];\n  for (const sentence of splitWords) {\n    for (const key of dict_keys) {\n      const regex = new RegExp(`[ء-٩]*${key}[ء-٩]*`, \"g\");\n      if (sentence.match(regex, \"g\")) {\n        newText.push([sentence, dict[key]]);\n      } else {\n        newText.push(sentence);\n      }\n    }\n  }\n  return newText;\n}\n"],"mappings":";;;AAAA,SAASA,MAAT,QAAuB,aAAvB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,QAAyB,OAAzB;AACA,OAAOC,cAAP,MAA2B,gCAA3B;AACA,OAAOC,OAAP,MAAoB,yBAApB;AACA,OAAOC,UAAP,MAAuB,+BAAvB;AACA,OAAOC,eAAP,MAA4B,oCAA5B;;AACA,eAAe,SAASC,IAAT,OAAwB;EAAA;;EAAA,IAAV;IAAEC;EAAF,CAAU;EACrC,MAAM,CAACC,IAAD,IAASP,QAAQ,CAACQ,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,SAAL,CAAeP,UAAf,CAAX,CAAD,CAAvB;EACA,MAAM,CAACQ,SAAD,IAAcX,QAAQ,CAACQ,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,SAAL,CAAeN,eAAf,CAAX,CAAD,CAA5B;EACA,oBACE;IAAA,UACGQ,OAAO,CAACC,GAAR,CACCC,iCAAiC,CAC/BC,sBAAsB,CAACT,IAAD,EAAOK,SAAP,CADS,CADlC;EADH;IAAA;IAAA;IAAA;EAAA,QADF;AASD,C,CAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;;GA3BwBN,I;;KAAAA,I;;AA6BxB,SAASU,sBAAT,CAAgCT,IAAhC,EAAsCK,SAAtC,EAAiD;EAC/C,MAAMK,QAAQ,GAAGL,SAAS,CAACM,IAAV,CAAe,GAAf,CAAjB;EACA,MAAMC,KAAK,GAAG,IAAIC,MAAJ,CAAY,UAASH,QAAS,SAA9B,EAAwC,GAAxC,CAAd;EACA,MAAMI,YAAY,GAAGd,IAAI,CAACe,KAAL,CAAWH,KAAX,CAArB;EACA,MAAMI,cAAc,GAAGF,YAAY,CAACH,IAAb,CAAkB,GAAlB,CAAvB;EACA,MAAMM,eAAe,GAAG,IAAIJ,MAAJ,CAAY,IAAGG,cAAe,GAA9B,EAAkC,GAAlC,CAAxB;EACA,MAAME,UAAU,GAAGlB,IAAI,CAACmB,KAAL,CAAWF,eAAX,CAAnB;EACA,OAAOC,UAAP;AACD;;AAED,SAASV,iCAAT,CAA2CU,UAA3C,EAAuDb,SAAvD,EAAkEJ,IAAlE,EAAwE;EACtE,MAAMmB,OAAO,GAAG,EAAhB;;EACA,KAAK,MAAMC,QAAX,IAAuBH,UAAvB,EAAmC;IACjC,KAAK,MAAMI,GAAX,IAAkBjB,SAAlB,EAA6B;MAC3B,MAAMO,KAAK,GAAG,IAAIC,MAAJ,CAAY,SAAQS,GAAI,QAAxB,EAAiC,GAAjC,CAAd;;MACA,IAAID,QAAQ,CAACN,KAAT,CAAeH,KAAf,EAAsB,GAAtB,CAAJ,EAAgC;QAC9BQ,OAAO,CAACG,IAAR,CAAa,CAACF,QAAD,EAAWpB,IAAI,CAACqB,GAAD,CAAf,CAAb;MACD,CAFD,MAEO;QACLF,OAAO,CAACG,IAAR,CAAaF,QAAb;MACD;IACF;EACF;;EACD,OAAOD,OAAP;AACD"},"metadata":{},"sourceType":"module"}