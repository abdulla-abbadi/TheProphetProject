{"ast":null,"code":"var _jsxFileName = \"/Users/abbadi/Desktop/personal-projects/prophet-descriptions-app/prophet/src/components/hadith/Text.jsx\",\n    _s = $RefreshSig$();\n\nimport { random } from \"fontawesome\";\nimport React from \"react\";\nimport { useState } from \"react\";\nimport OverlayTrigger from \"react-bootstrap/OverlayTrigger\";\nimport Popover from \"react-bootstrap/Popover\";\nimport dictionary from \"../../sources/dictionary.json\";\nimport dictionary_keys from \"../../sources/dictionary_keys.json\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Text(_ref) {\n  _s();\n\n  let {\n    text\n  } = _ref;\n  const [dict] = useState(JSON.parse(JSON.stringify(dictionary)));\n  const [dict_keys] = useState(JSON.parse(JSON.stringify(dictionary_keys)));\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: console.log(get_all_matched_words(text, dict_keys))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 12,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Text, \"s4MjzcTSKo/UCZrQ4aKBMwrtl2I=\");\n\n_c = Text;\n\nfunction get_all_matched_words(text, dict_keys) {\n  const keys = dict_keys.join(\"|\");\n  const regex = new RegExp(`[ء-٩]*(${keys})[ء-٩]*`, \"g\");\n  const matched_words = text.match(regex, \"g\");\n  return matched_words;\n}\n\nvar _c;\n\n$RefreshReg$(_c, \"Text\");","map":{"version":3,"names":["random","React","useState","OverlayTrigger","Popover","dictionary","dictionary_keys","Text","text","dict","JSON","parse","stringify","dict_keys","console","log","get_all_matched_words","keys","join","regex","RegExp","matched_words","match"],"sources":["/Users/abbadi/Desktop/personal-projects/prophet-descriptions-app/prophet/src/components/hadith/Text.jsx"],"sourcesContent":["import { random } from \"fontawesome\";\nimport React from \"react\";\nimport { useState } from \"react\";\nimport OverlayTrigger from \"react-bootstrap/OverlayTrigger\";\nimport Popover from \"react-bootstrap/Popover\";\nimport dictionary from \"../../sources/dictionary.json\";\nimport dictionary_keys from \"../../sources/dictionary_keys.json\";\nexport default function Text({ text }) {\n  const [dict] = useState(JSON.parse(JSON.stringify(dictionary)));\n  const [dict_keys] = useState(JSON.parse(JSON.stringify(dictionary_keys)));\n  return (\n    <div>\n      {/* {Object.entries(dict).map(([key]) => {\n        let regex = new RegExp(`[ء-٩]*${key}`, \"g\");\n        let keywords = text.replace(regex, \"<i>\" + { key } + \"</i>\");\n        text = keywords;\n      })}\n      {text} */}\n      {console.log(get_all_matched_words(text, dict_keys))}\n    </div>\n  );\n}\n\nfunction get_all_matched_words(text, dict_keys) {\n  const keys = dict_keys.join(\"|\");\n  const regex = new RegExp(`[ء-٩]*(${keys})[ء-٩]*`, \"g\");\n  const matched_words = text.match(regex, \"g\");\n\n  return matched_words;\n}\n"],"mappings":";;;AAAA,SAASA,MAAT,QAAuB,aAAvB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,QAAyB,OAAzB;AACA,OAAOC,cAAP,MAA2B,gCAA3B;AACA,OAAOC,OAAP,MAAoB,yBAApB;AACA,OAAOC,UAAP,MAAuB,+BAAvB;AACA,OAAOC,eAAP,MAA4B,oCAA5B;;AACA,eAAe,SAASC,IAAT,OAAwB;EAAA;;EAAA,IAAV;IAAEC;EAAF,CAAU;EACrC,MAAM,CAACC,IAAD,IAASP,QAAQ,CAACQ,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,SAAL,CAAeP,UAAf,CAAX,CAAD,CAAvB;EACA,MAAM,CAACQ,SAAD,IAAcX,QAAQ,CAACQ,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,SAAL,CAAeN,eAAf,CAAX,CAAD,CAA5B;EACA,oBACE;IAAA,UAOGQ,OAAO,CAACC,GAAR,CAAYC,qBAAqB,CAACR,IAAD,EAAOK,SAAP,CAAjC;EAPH;IAAA;IAAA;IAAA;EAAA,QADF;AAWD;;GAduBN,I;;KAAAA,I;;AAgBxB,SAASS,qBAAT,CAA+BR,IAA/B,EAAqCK,SAArC,EAAgD;EAC9C,MAAMI,IAAI,GAAGJ,SAAS,CAACK,IAAV,CAAe,GAAf,CAAb;EACA,MAAMC,KAAK,GAAG,IAAIC,MAAJ,CAAY,UAASH,IAAK,SAA1B,EAAoC,GAApC,CAAd;EACA,MAAMI,aAAa,GAAGb,IAAI,CAACc,KAAL,CAAWH,KAAX,EAAkB,GAAlB,CAAtB;EAEA,OAAOE,aAAP;AACD"},"metadata":{},"sourceType":"module"}