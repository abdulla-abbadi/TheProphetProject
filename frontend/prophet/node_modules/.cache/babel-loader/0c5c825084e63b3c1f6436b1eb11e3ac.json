{"ast":null,"code":"\"use strict\";\n\nexports.__esModule = true;\n/**\n * Remove all accentuated characters from a string\n */\n\nvar stripAccents = function (input) {\n  var accents = \"ÀÁÂÃÄÅĄàáâãäåąÒÓÔÕÕÖØòóôõöøÈÉÊËĘèéêëðęÇĆçćÐÌÍÎÏìíîïÙÚÛÜùúûüÑñŠŚšśŸÿýŽŹŻžźżŁłŃńàáãảạăằắẳẵặâầấẩẫậèéẻẽẹêềếểễệđùúủũụưừứửữựòóỏõọôồốổỗộơờớởỡợìíỉĩịäëïîöüûñçýỳỹỵỷ\";\n  var fixes = \"AAAAAAAaaaaaaaOOOOOOOooooooEEEEEeeeeeeCCccDIIIIiiiiUUUUuuuuNnSSssYyyZZZzzzLlNnaaaaaaaaaaaaaaaaaeeeeeeeeeeeduuuuuuuuuuuoooooooooooooooooiiiiiaeiiouuncyyyyy\";\n  var split = accents.split('').join('|');\n  var reg = new RegExp(\"(\" + split + \")\", 'g');\n\n  function replacement(a) {\n    return fixes[accents.indexOf(a)] || '';\n  }\n\n  return input.replace(reg, replacement);\n};\n\nvar getSafeRegexpString = function (input) {\n  return input.split('').map(function (char) {\n    return \"\\\\\" + char;\n  }).join('');\n};\n/**\n * Harmonize a string by removing spaces, non-alphabetical caracters and by\n * adding delimiter\n */\n\n\nvar harmonize = function (input, delimiter, ignoreInvalid) {\n  if (ignoreInvalid === void 0) {\n    ignoreInvalid = false;\n  }\n\n  var harmonized = stripAccents(input).trim().toLowerCase();\n  var safeDelimiter = getSafeRegexpString(delimiter);\n\n  if (ignoreInvalid) {\n    return harmonized.replace(/\\s+/g, delimiter);\n  }\n\n  return harmonized.replace(new RegExp(\"[^a-z0-9\" + safeDelimiter + \"]+\", 'g'), delimiter) // Replace all non-valid caracters by delimiter\n  .replace(new RegExp(safeDelimiter + \"+\", 'g'), delimiter) // Remove multiple delimiters repetition\n  .replace(new RegExp(\"^\" + safeDelimiter, 'g'), '') // remove delimiter at the beginning\n  .replace(new RegExp(safeDelimiter + \"$\", 'g'), ''); // remove delimiter at the end\n};\n/**\n * Slugify a React node\n */\n\n\nvar slugify = function (node, options) {\n  if (options === void 0) {\n    options = {\n      delimiter: '-',\n      prefix: ''\n    };\n  }\n\n  if (!options.delimiter) options.delimiter = '-';\n  if (!options.prefix) options.prefix = '';\n\n  if (!node || typeof node === 'boolean') {\n    return '';\n  }\n\n  var delimiter = options.delimiter,\n      prefix = options.prefix; // string, number\n\n  if (typeof node === 'string' || typeof node === 'number') {\n    var harmonizedPrefix = harmonize(prefix, delimiter, true);\n    var harmonizedNode = harmonize(String(node), delimiter);\n\n    if (harmonizedPrefix) {\n      return \"\" + harmonizedPrefix + delimiter + harmonizedNode;\n    }\n\n    return harmonizedNode;\n  } // empty object\n\n\n  if (typeof node === 'object' && Object.keys(node).length === 0) {\n    return '';\n  } // ReactPortal\n\n\n  if ('children' in node) {\n    return slugify(node.children);\n  } // ReactNodeArray\n\n\n  if (node instanceof Array) {\n    return slugify(node.map(function (subNode) {\n      return slugify(subNode, {\n        delimiter: delimiter\n      });\n    }).join(delimiter), options);\n  } // ReactElement\n\n\n  if ('type' in node) return slugify(node.props.children, options); // unhandled case\n\n  return '';\n};\n\nexports[\"default\"] = slugify;","map":{"version":3,"mappings":"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","names":["stripAccents","input","accents","fixes","split","join","reg","RegExp","replacement","a","indexOf","replace","getSafeRegexpString","map","char","harmonize","delimiter","ignoreInvalid","harmonized","trim","toLowerCase","safeDelimiter","slugify","node","options","prefix","harmonizedPrefix","harmonizedNode","String","Object","keys","length","children","Array","subNode","props","exports"],"sources":["../src/slugify.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}