{"ast":null,"code":"var _jsxFileName = \"/Users/abbadi/Desktop/personal-projects/prophet-descriptions-app/prophet-hadiths-projects/frontend/prophet/src/components/hadith/Text.jsx\";\nimport React from \"react\";\nimport { useState } from \"react\";\nimport OverlayTrigger from \"react-bootstrap/OverlayTrigger\";\nimport Popover from \"react-bootstrap/Popover\";\nimport { DictionaryContext } from \"../../Contexts/DictionaryContext\"; // import dictionary from \"../../sources/dictionary.json\";\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Text(_ref) {\n  let {\n    text\n  } = _ref;\n  // const [dict] = useState(JSON.parse(JSON.stringify(dictionary)));\n  // const dict_keys = Object.keys(dict);\n  return /*#__PURE__*/_jsxDEV(DictionaryContext.Consumer, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: add_definations_for_matched_words(split_on_matched_words(text, Object.keys(dictionary)), dict_keys, dictionary).map(segment => {\n        return typeof segment === \"string\" ? segment : /*#__PURE__*/_jsxDEV(OverlayTrigger, {\n          placement: \"top\",\n          overlay: /*#__PURE__*/_jsxDEV(Popover, {\n            id: segment[0],\n            children: /*#__PURE__*/_jsxDEV(Popover.Body, {\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"card-body\",\n                children: /*#__PURE__*/_jsxDEV(\"p\", {\n                  className: \"card-text\",\n                  children: segment[1]\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 29,\n                  columnNumber: 23\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 28,\n                columnNumber: 21\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 27,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 26,\n            columnNumber: 17\n          }, this),\n          children: /*#__PURE__*/_jsxDEV(\"span\", {\n            type: \"button\",\n            className: \" text-primary\",\n            children: [segment[0], /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \" text-dark\",\n              children: \"\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 37,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 35,\n            columnNumber: 15\n          }, this)\n        }, `${segment[0]}_${Math.floor(Math.random(0, 100) * 1000)}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 22,\n          columnNumber: 13\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 12,\n    columnNumber: 5\n  }, this);\n}\n_c = Text;\n\nfunction split_on_matched_words(text, dict_keys) {\n  const keyWords = dict_keys.join(\"|\");\n  const regex = new RegExp(`[ء-٩]*(${keyWords})[ء-٩]*`, \"g\");\n  const matchedWords = text.match(regex);\n  const splitWordsKeys = matchedWords.join(\"|\");\n  const SplitWordsRegex = new RegExp(`(${splitWordsKeys})`, \"g\");\n  const splitWords = text.split(SplitWordsRegex);\n  return splitWords;\n}\n\nfunction add_definations_for_matched_words(splitWords, dict_keys, dict) {\n  const newText = [];\n\n  for (const sentence of splitWords) {\n    let segment = sentence;\n\n    for (const key of dict_keys) {\n      const regex = new RegExp(`[ء-٩]*${key}[ء-٩]*`, \"g\");\n\n      if (sentence.match(regex, \"g\")) {\n        segment = [sentence, dict[key]];\n      }\n    }\n\n    newText.push(segment);\n  }\n\n  return newText;\n}\n\nvar _c;\n\n$RefreshReg$(_c, \"Text\");","map":{"version":3,"names":["React","useState","OverlayTrigger","Popover","DictionaryContext","Text","text","add_definations_for_matched_words","split_on_matched_words","Object","keys","dictionary","dict_keys","map","segment","Math","floor","random","keyWords","join","regex","RegExp","matchedWords","match","splitWordsKeys","SplitWordsRegex","splitWords","split","dict","newText","sentence","key","push"],"sources":["/Users/abbadi/Desktop/personal-projects/prophet-descriptions-app/prophet-hadiths-projects/frontend/prophet/src/components/hadith/Text.jsx"],"sourcesContent":["import React from \"react\";\nimport { useState } from \"react\";\nimport OverlayTrigger from \"react-bootstrap/OverlayTrigger\";\nimport Popover from \"react-bootstrap/Popover\";\nimport { DictionaryContext } from \"../../Contexts/DictionaryContext\";\n// import dictionary from \"../../sources/dictionary.json\";\n\nexport default function Text({ text }) {\n  // const [dict] = useState(JSON.parse(JSON.stringify(dictionary)));\n  // const dict_keys = Object.keys(dict);\n  return (\n    <DictionaryContext.Consumer>\n      <div>\n        {add_definations_for_matched_words(\n          split_on_matched_words(text, Object.keys(dictionary)),\n          dict_keys,\n          dictionary\n        ).map((segment) => {\n          return typeof segment === \"string\" ? (\n            segment\n          ) : (\n            <OverlayTrigger\n              key={`${segment[0]}_${Math.floor(Math.random(0, 100) * 1000)}`}\n              placement=\"top\"\n              overlay={\n                <Popover id={segment[0]}>\n                  <Popover.Body>\n                    <div className=\"card-body\">\n                      <p className=\"card-text\">{segment[1]}</p>\n                    </div>\n                  </Popover.Body>\n                </Popover>\n              }\n            >\n              <span type=\"button\" className=\" text-primary\">\n                {segment[0]}\n                <span className=\" text-dark\">{\"\"}</span>\n              </span>\n            </OverlayTrigger>\n          );\n        })}\n      </div>\n    </DictionaryContext.Consumer>\n  );\n}\n\nfunction split_on_matched_words(text, dict_keys) {\n  const keyWords = dict_keys.join(\"|\");\n  const regex = new RegExp(`[ء-٩]*(${keyWords})[ء-٩]*`, \"g\");\n  const matchedWords = text.match(regex);\n  const splitWordsKeys = matchedWords.join(\"|\");\n  const SplitWordsRegex = new RegExp(`(${splitWordsKeys})`, \"g\");\n  const splitWords = text.split(SplitWordsRegex);\n  return splitWords;\n}\n\nfunction add_definations_for_matched_words(splitWords, dict_keys, dict) {\n  const newText = [];\n  for (const sentence of splitWords) {\n    let segment = sentence;\n    for (const key of dict_keys) {\n      const regex = new RegExp(`[ء-٩]*${key}[ء-٩]*`, \"g\");\n      if (sentence.match(regex, \"g\")) {\n        segment = [sentence, dict[key]];\n      }\n    }\n    newText.push(segment);\n  }\n  return newText;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}