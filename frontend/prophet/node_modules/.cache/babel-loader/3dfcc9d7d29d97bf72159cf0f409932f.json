{"ast":null,"code":"var _jsxFileName = \"/Users/abbadi/Desktop/personal-projects/prophet-descriptions-app/prophet/src/components/hadith/Text.jsx\",\n    _s = $RefreshSig$();\n\nimport { random } from \"fontawesome\";\nimport React from \"react\";\nimport { useState } from \"react\";\nimport OverlayTrigger from \"react-bootstrap/OverlayTrigger\";\nimport Popover from \"react-bootstrap/Popover\";\nimport dictionary from \"../../sources/dictionary.json\";\nimport dictionary_keys from \"../../sources/dictionary_keys.json\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Text(_ref) {\n  _s();\n\n  let {\n    text\n  } = _ref;\n  const [dict] = useState(JSON.parse(JSON.stringify(dictionary)));\n  const [dict_keys] = useState(JSON.parse(JSON.stringify(dictionary_keys)));\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: add_definations_for_matched_words(split_on_matched_words(text, dict_keys), dict_keys, dict).map(segment => {\n      console.log(segment);\n      return typeof segment === \"string\" ? segment : /*#__PURE__*/_jsxDEV(OverlayTrigger, {\n        placement: \"top\",\n        overlay: /*#__PURE__*/_jsxDEV(Popover, {\n          id: stripedWord,\n          children: /*#__PURE__*/_jsxDEV(Popover.Body, {\n            children: [dict[stripedWord].image === \"\" ? \"\" : /*#__PURE__*/_jsxDEV(\"img\", {\n              width: 90,\n              height: 90,\n              src: dict[stripedWord].image,\n              className: \"card-img-top\",\n              alt: \"\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 31,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"card-body\",\n              children: /*#__PURE__*/_jsxDEV(\"p\", {\n                className: \"card-text\",\n                children: dict[stripedWord].des\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 40,\n                columnNumber: 21\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 39,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 27,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 26,\n          columnNumber: 15\n        }, this),\n        children: /*#__PURE__*/_jsxDEV(\"span\", {\n          type: \"button\",\n          className: \" text-primary\",\n          children: [stripedWord, /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \" text-dark\",\n            children: \"،\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 48,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 13\n        }, this)\n      }, `${segment[0]}_${Math.floor(Math.random(0, 100) * 1000)}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 11\n      }, this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 12,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Text, \"s4MjzcTSKo/UCZrQ4aKBMwrtl2I=\");\n\n_c = Text;\n\nfunction split_on_matched_words(text, dict_keys) {\n  const keyWords = dict_keys.join(\"|\");\n  const regex = new RegExp(`[ء-٩]*(${keyWords})[ء-٩]*`, \"g\");\n  const matchedWords = text.match(regex);\n  const splitWordsKeys = matchedWords.join(\"|\");\n  const SplitWordsRegex = new RegExp(`(${splitWordsKeys})`, \"g\");\n  const splitWords = text.split(SplitWordsRegex);\n  return splitWords;\n}\n\nfunction add_definations_for_matched_words(splitWords, dict_keys, dict) {\n  const newText = [];\n\n  for (const sentence of splitWords) {\n    let segment = sentence;\n\n    for (const key of dict_keys) {\n      const regex = new RegExp(`[ء-٩]*${key}[ء-٩]*`, \"g\");\n\n      if (sentence.match(regex, \"g\")) {\n        segment = [sentence, dict[key]];\n      }\n    }\n\n    newText.push(segment);\n  }\n\n  return newText;\n}\n\nvar _c;\n\n$RefreshReg$(_c, \"Text\");","map":{"version":3,"names":["random","React","useState","OverlayTrigger","Popover","dictionary","dictionary_keys","Text","text","dict","JSON","parse","stringify","dict_keys","add_definations_for_matched_words","split_on_matched_words","map","segment","console","log","stripedWord","image","des","Math","floor","keyWords","join","regex","RegExp","matchedWords","match","splitWordsKeys","SplitWordsRegex","splitWords","split","newText","sentence","key","push"],"sources":["/Users/abbadi/Desktop/personal-projects/prophet-descriptions-app/prophet/src/components/hadith/Text.jsx"],"sourcesContent":["import { random } from \"fontawesome\";\nimport React from \"react\";\nimport { useState } from \"react\";\nimport OverlayTrigger from \"react-bootstrap/OverlayTrigger\";\nimport Popover from \"react-bootstrap/Popover\";\nimport dictionary from \"../../sources/dictionary.json\";\nimport dictionary_keys from \"../../sources/dictionary_keys.json\";\nexport default function Text({ text }) {\n  const [dict] = useState(JSON.parse(JSON.stringify(dictionary)));\n  const [dict_keys] = useState(JSON.parse(JSON.stringify(dictionary_keys)));\n  return (\n    <div>\n      {add_definations_for_matched_words(\n        split_on_matched_words(text, dict_keys),\n        dict_keys,\n        dict\n      ).map((segment) => {\n        console.log(segment);\n        return typeof segment === \"string\" ? (\n          segment\n        ) : (\n          <OverlayTrigger\n            key={`${segment[0]}_${Math.floor(Math.random(0, 100) * 1000)}`}\n            placement=\"top\"\n            overlay={\n              <Popover id={stripedWord}>\n                <Popover.Body>\n                  {dict[stripedWord].image === \"\" ? (\n                    \"\"\n                  ) : (\n                    <img\n                      width={90}\n                      height={90}\n                      src={dict[stripedWord].image}\n                      className=\"card-img-top\"\n                      alt=\"\"\n                    />\n                  )}\n                  <div className=\"card-body\">\n                    <p className=\"card-text\">{dict[stripedWord].des}</p>\n                  </div>\n                </Popover.Body>\n              </Popover>\n            }\n          >\n            <span type=\"button\" className=\" text-primary\">\n              {stripedWord}\n              <span className=\" text-dark\">{\"،\"}</span>\n            </span>\n          </OverlayTrigger>\n        );\n      })}\n    </div>\n  );\n}\n\nfunction split_on_matched_words(text, dict_keys) {\n  const keyWords = dict_keys.join(\"|\");\n  const regex = new RegExp(`[ء-٩]*(${keyWords})[ء-٩]*`, \"g\");\n  const matchedWords = text.match(regex);\n  const splitWordsKeys = matchedWords.join(\"|\");\n  const SplitWordsRegex = new RegExp(`(${splitWordsKeys})`, \"g\");\n  const splitWords = text.split(SplitWordsRegex);\n  return splitWords;\n}\n\nfunction add_definations_for_matched_words(splitWords, dict_keys, dict) {\n  const newText = [];\n  for (const sentence of splitWords) {\n    let segment = sentence;\n    for (const key of dict_keys) {\n      const regex = new RegExp(`[ء-٩]*${key}[ء-٩]*`, \"g\");\n      if (sentence.match(regex, \"g\")) {\n        segment = [sentence, dict[key]];\n      }\n    }\n    newText.push(segment);\n  }\n  return newText;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}