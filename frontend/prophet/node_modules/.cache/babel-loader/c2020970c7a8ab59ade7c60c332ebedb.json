{"ast":null,"code":"var _jsxFileName = \"/Users/abbadi/Desktop/personal-projects/prophet-descriptions-app/prophet/src/components/hadith/Text.jsx\",\n    _s = $RefreshSig$();\n\nimport { random } from \"fontawesome\";\nimport React from \"react\";\nimport { useState } from \"react\";\nimport OverlayTrigger from \"react-bootstrap/OverlayTrigger\";\nimport Popover from \"react-bootstrap/Popover\";\nimport dictionary from \"../../sources/dictionary.json\";\nimport dictionary_keys from \"../../sources/dictionary_keys.json\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Text(_ref) {\n  _s();\n\n  let {\n    text\n  } = _ref;\n  const [dict] = useState(JSON.parse(JSON.stringify(dictionary)));\n  const [dict_keys] = useState(JSON.parse(JSON.stringify(dictionary_keys)));\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: get_all_matched_words(text, dict_keys)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 11,\n    columnNumber: 10\n  }, this);\n} // function get_all_matched_words(text, dict_keys) {\n//   const words = text.split(\" \");\n//   let matched_words = [];\n//   for (const word of words) {\n//     for (const key of dict_keys) {\n//       const regex = new RegExp(`[ء-٩]*(${key})[ء-٩]*`, \"g\");\n//       if (word.match(regex)) {\n//         matched_words.push([word, key]);\n//       }\n//     }\n//   }\n//   return matched_words;\n// }\n\n_s(Text, \"s4MjzcTSKo/UCZrQ4aKBMwrtl2I=\");\n\n_c = Text;\n\nfunction split_on_matched_words(text, dict_keys) {\n  const split_key_words = dict_keys.join(\"|\");\n  const regex = new RegExp(`[ء-٩]*(${split_key_words})[ء-٩]*`, \"g\");\n  text.split(regex);\n}\n\nvar _c;\n\n$RefreshReg$(_c, \"Text\");","map":{"version":3,"names":["random","React","useState","OverlayTrigger","Popover","dictionary","dictionary_keys","Text","text","dict","JSON","parse","stringify","dict_keys","get_all_matched_words","split_on_matched_words","split_key_words","join","regex","RegExp","split"],"sources":["/Users/abbadi/Desktop/personal-projects/prophet-descriptions-app/prophet/src/components/hadith/Text.jsx"],"sourcesContent":["import { random } from \"fontawesome\";\nimport React from \"react\";\nimport { useState } from \"react\";\nimport OverlayTrigger from \"react-bootstrap/OverlayTrigger\";\nimport Popover from \"react-bootstrap/Popover\";\nimport dictionary from \"../../sources/dictionary.json\";\nimport dictionary_keys from \"../../sources/dictionary_keys.json\";\nexport default function Text({ text }) {\n  const [dict] = useState(JSON.parse(JSON.stringify(dictionary)));\n  const [dict_keys] = useState(JSON.parse(JSON.stringify(dictionary_keys)));\n  return <div>{get_all_matched_words(text, dict_keys)}</div>;\n}\n\n// function get_all_matched_words(text, dict_keys) {\n//   const words = text.split(\" \");\n//   let matched_words = [];\n//   for (const word of words) {\n//     for (const key of dict_keys) {\n//       const regex = new RegExp(`[ء-٩]*(${key})[ء-٩]*`, \"g\");\n//       if (word.match(regex)) {\n//         matched_words.push([word, key]);\n//       }\n//     }\n//   }\n\n//   return matched_words;\n// }\n\nfunction split_on_matched_words(text, dict_keys) {\n  const split_key_words = dict_keys.join(\"|\");\n  const regex = new RegExp(`[ء-٩]*(${split_key_words})[ء-٩]*`, \"g\");\n  text.split(regex);\n}\n"],"mappings":";;;AAAA,SAASA,MAAT,QAAuB,aAAvB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,QAAyB,OAAzB;AACA,OAAOC,cAAP,MAA2B,gCAA3B;AACA,OAAOC,OAAP,MAAoB,yBAApB;AACA,OAAOC,UAAP,MAAuB,+BAAvB;AACA,OAAOC,eAAP,MAA4B,oCAA5B;;AACA,eAAe,SAASC,IAAT,OAAwB;EAAA;;EAAA,IAAV;IAAEC;EAAF,CAAU;EACrC,MAAM,CAACC,IAAD,IAASP,QAAQ,CAACQ,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,SAAL,CAAeP,UAAf,CAAX,CAAD,CAAvB;EACA,MAAM,CAACQ,SAAD,IAAcX,QAAQ,CAACQ,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,SAAL,CAAeN,eAAf,CAAX,CAAD,CAA5B;EACA,oBAAO;IAAA,UAAMQ,qBAAqB,CAACN,IAAD,EAAOK,SAAP;EAA3B;IAAA;IAAA;IAAA;EAAA,QAAP;AACD,C,CAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;;GAnBwBN,I;;KAAAA,I;;AAqBxB,SAASQ,sBAAT,CAAgCP,IAAhC,EAAsCK,SAAtC,EAAiD;EAC/C,MAAMG,eAAe,GAAGH,SAAS,CAACI,IAAV,CAAe,GAAf,CAAxB;EACA,MAAMC,KAAK,GAAG,IAAIC,MAAJ,CAAY,UAASH,eAAgB,SAArC,EAA+C,GAA/C,CAAd;EACAR,IAAI,CAACY,KAAL,CAAWF,KAAX;AACD"},"metadata":{},"sourceType":"module"}