{"ast":null,"code":"var _jsxFileName = \"/Users/abbadi/Desktop/personal-projects/prophet-descriptions-app/prophet/src/components/hadith/Text.jsx\",\n    _s = $RefreshSig$();\n\nimport { random } from \"fontawesome\";\nimport React from \"react\";\nimport { useState } from \"react\";\nimport OverlayTrigger from \"react-bootstrap/OverlayTrigger\";\nimport Popover from \"react-bootstrap/Popover\";\nimport dictionary from \"../../sources/dictionary.json\";\nimport dictionary_keys from \"../../sources/dictionary_keys.json\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Text(_ref) {\n  _s();\n\n  let {\n    text\n  } = _ref;\n  const [dict] = useState(JSON.parse(JSON.stringify(dictionary)));\n  const [dict_keys] = useState(JSON.parse(JSON.stringify(dictionary_keys)));\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: add_definations_for_matched_words(split_on_matched_words(text, dict_keys), dict_keys, dict).map(segment => {\n      console.log(segment);\n      return typeof segment == String ? segment : segment[0];\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 12,\n    columnNumber: 5\n  }, this);\n} // function get_all_matched_words(text, dict_keys) {\n//   const words = text.split(\" \");\n//   let matched_words = [];\n//   for (const word of words) {\n//     for (const key of dict_keys) {\n//       const regex = new RegExp(`[ء-٩]*(${key})[ء-٩]*`, \"g\");\n//       if (word.match(regex)) {\n//         matched_words.push([word, key]);\n//       }\n//     }\n//   }\n//   return matched_words;\n// }\n\n_s(Text, \"s4MjzcTSKo/UCZrQ4aKBMwrtl2I=\");\n\n_c = Text;\n\nfunction split_on_matched_words(text, dict_keys) {\n  const keyWords = dict_keys.join(\"|\");\n  const regex = new RegExp(`[ء-٩]*(${keyWords})[ء-٩]*`, \"g\");\n  const matchedWords = text.match(regex);\n  const splitWordsKeys = matchedWords.join(\"|\");\n  const SplitWordsRegex = new RegExp(`(${splitWordsKeys})`, \"g\");\n  const splitWords = text.split(SplitWordsRegex);\n  return splitWords;\n}\n\nfunction add_definations_for_matched_words(splitWords, dict_keys, dict) {\n  const newText = [];\n\n  for (const sentence of splitWords) {\n    let segment = sentence;\n\n    for (const key of dict_keys) {\n      const regex = new RegExp(`[ء-٩]*${key}[ء-٩]*`, \"g\");\n\n      if (sentence.match(regex, \"g\")) {\n        segment = [sentence, dict[key]];\n      }\n    }\n\n    newText.push(segment);\n  }\n\n  return newText;\n}\n\nvar _c;\n\n$RefreshReg$(_c, \"Text\");","map":{"version":3,"names":["random","React","useState","OverlayTrigger","Popover","dictionary","dictionary_keys","Text","text","dict","JSON","parse","stringify","dict_keys","add_definations_for_matched_words","split_on_matched_words","map","segment","console","log","String","keyWords","join","regex","RegExp","matchedWords","match","splitWordsKeys","SplitWordsRegex","splitWords","split","newText","sentence","key","push"],"sources":["/Users/abbadi/Desktop/personal-projects/prophet-descriptions-app/prophet/src/components/hadith/Text.jsx"],"sourcesContent":["import { random } from \"fontawesome\";\nimport React from \"react\";\nimport { useState } from \"react\";\nimport OverlayTrigger from \"react-bootstrap/OverlayTrigger\";\nimport Popover from \"react-bootstrap/Popover\";\nimport dictionary from \"../../sources/dictionary.json\";\nimport dictionary_keys from \"../../sources/dictionary_keys.json\";\nexport default function Text({ text }) {\n  const [dict] = useState(JSON.parse(JSON.stringify(dictionary)));\n  const [dict_keys] = useState(JSON.parse(JSON.stringify(dictionary_keys)));\n  return (\n    <div>\n      {add_definations_for_matched_words(\n        split_on_matched_words(text, dict_keys),\n        dict_keys,\n        dict\n      ).map((segment) => {\n        console.log(segment);\n        return typeof segment == String ? segment : segment[0];\n      })}\n    </div>\n  );\n}\n\n// function get_all_matched_words(text, dict_keys) {\n//   const words = text.split(\" \");\n//   let matched_words = [];\n//   for (const word of words) {\n//     for (const key of dict_keys) {\n//       const regex = new RegExp(`[ء-٩]*(${key})[ء-٩]*`, \"g\");\n//       if (word.match(regex)) {\n//         matched_words.push([word, key]);\n//       }\n//     }\n//   }\n\n//   return matched_words;\n// }\n\nfunction split_on_matched_words(text, dict_keys) {\n  const keyWords = dict_keys.join(\"|\");\n  const regex = new RegExp(`[ء-٩]*(${keyWords})[ء-٩]*`, \"g\");\n  const matchedWords = text.match(regex);\n  const splitWordsKeys = matchedWords.join(\"|\");\n  const SplitWordsRegex = new RegExp(`(${splitWordsKeys})`, \"g\");\n  const splitWords = text.split(SplitWordsRegex);\n  return splitWords;\n}\n\nfunction add_definations_for_matched_words(splitWords, dict_keys, dict) {\n  const newText = [];\n  for (const sentence of splitWords) {\n    let segment = sentence;\n    for (const key of dict_keys) {\n      const regex = new RegExp(`[ء-٩]*${key}[ء-٩]*`, \"g\");\n      if (sentence.match(regex, \"g\")) {\n        segment = [sentence, dict[key]];\n      }\n    }\n    newText.push(segment);\n  }\n  return newText;\n}\n"],"mappings":";;;AAAA,SAASA,MAAT,QAAuB,aAAvB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,QAAyB,OAAzB;AACA,OAAOC,cAAP,MAA2B,gCAA3B;AACA,OAAOC,OAAP,MAAoB,yBAApB;AACA,OAAOC,UAAP,MAAuB,+BAAvB;AACA,OAAOC,eAAP,MAA4B,oCAA5B;;AACA,eAAe,SAASC,IAAT,OAAwB;EAAA;;EAAA,IAAV;IAAEC;EAAF,CAAU;EACrC,MAAM,CAACC,IAAD,IAASP,QAAQ,CAACQ,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,SAAL,CAAeP,UAAf,CAAX,CAAD,CAAvB;EACA,MAAM,CAACQ,SAAD,IAAcX,QAAQ,CAACQ,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,SAAL,CAAeN,eAAf,CAAX,CAAD,CAA5B;EACA,oBACE;IAAA,UACGQ,iCAAiC,CAChCC,sBAAsB,CAACP,IAAD,EAAOK,SAAP,CADU,EAEhCA,SAFgC,EAGhCJ,IAHgC,CAAjC,CAICO,GAJD,CAIMC,OAAD,IAAa;MACjBC,OAAO,CAACC,GAAR,CAAYF,OAAZ;MACA,OAAO,OAAOA,OAAP,IAAkBG,MAAlB,GAA2BH,OAA3B,GAAqCA,OAAO,CAAC,CAAD,CAAnD;IACD,CAPA;EADH;IAAA;IAAA;IAAA;EAAA,QADF;AAYD,C,CAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;;GA9BwBV,I;;KAAAA,I;;AAgCxB,SAASQ,sBAAT,CAAgCP,IAAhC,EAAsCK,SAAtC,EAAiD;EAC/C,MAAMQ,QAAQ,GAAGR,SAAS,CAACS,IAAV,CAAe,GAAf,CAAjB;EACA,MAAMC,KAAK,GAAG,IAAIC,MAAJ,CAAY,UAASH,QAAS,SAA9B,EAAwC,GAAxC,CAAd;EACA,MAAMI,YAAY,GAAGjB,IAAI,CAACkB,KAAL,CAAWH,KAAX,CAArB;EACA,MAAMI,cAAc,GAAGF,YAAY,CAACH,IAAb,CAAkB,GAAlB,CAAvB;EACA,MAAMM,eAAe,GAAG,IAAIJ,MAAJ,CAAY,IAAGG,cAAe,GAA9B,EAAkC,GAAlC,CAAxB;EACA,MAAME,UAAU,GAAGrB,IAAI,CAACsB,KAAL,CAAWF,eAAX,CAAnB;EACA,OAAOC,UAAP;AACD;;AAED,SAASf,iCAAT,CAA2Ce,UAA3C,EAAuDhB,SAAvD,EAAkEJ,IAAlE,EAAwE;EACtE,MAAMsB,OAAO,GAAG,EAAhB;;EACA,KAAK,MAAMC,QAAX,IAAuBH,UAAvB,EAAmC;IACjC,IAAIZ,OAAO,GAAGe,QAAd;;IACA,KAAK,MAAMC,GAAX,IAAkBpB,SAAlB,EAA6B;MAC3B,MAAMU,KAAK,GAAG,IAAIC,MAAJ,CAAY,SAAQS,GAAI,QAAxB,EAAiC,GAAjC,CAAd;;MACA,IAAID,QAAQ,CAACN,KAAT,CAAeH,KAAf,EAAsB,GAAtB,CAAJ,EAAgC;QAC9BN,OAAO,GAAG,CAACe,QAAD,EAAWvB,IAAI,CAACwB,GAAD,CAAf,CAAV;MACD;IACF;;IACDF,OAAO,CAACG,IAAR,CAAajB,OAAb;EACD;;EACD,OAAOc,OAAP;AACD"},"metadata":{},"sourceType":"module"}